• Log in to the Azure portal.
• Click "Create a resource" -> "Web App for Containers."
• Basics Tab:
• Subscription: Choose your subscription.
• Resource Group: Choose or create a resource group.
• Name: Give your web app a name.
• Region: Choose a region.
• Operating System: Select "Linux."
• App Service Plan: Choose or create an App Service Plan.
• Docker Tab:
• Image Source: Select "Docker Hub" or "Azure Container Registry."
• Image and tag: If using Docker Hub, enter your-dockerhub-username/your-image-name:tag. If using Azure Container Registry, select your registry, image, and tag.
• Networking, Monitoring, Tags: Configure as needed.
• Review + create: Review and create the web app.
Part 3: Linking GitHub with Azure for CI/CD (Containerized)
1. 
Deployment Center:
• In your Azure Web App resource page, go to "Deployment Center."
• Source: Select "GitHub."
• Authorization: Authorize Azure to access your GitHub account.
• Organization, Repository, Branch: Select your repository and branch.
• Build Provider: Select "GitHub Actions."
• Click "Save."
2. 
Customize the Workflow:
• The generated workflow will need to be customized to build and push your Docker image. Edit the .github/workflows/azure-webapps-<your-webapp-name>.yml file.
YAML
Copy code
name: Build and deploy Docker image to Azure Web App - <your-webapp-name>

on:
  push:
    branches:
      - main # Or your main branch
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Build and push Docker image
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/<your-image-name>:${{ github.sha }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/<your-image-name>:${{ github.sha }}
          echo "image=${{ secrets.DOCKERHUB_USERNAME }}/<your-image-name>:${{ github.sha }}" >> $GITHUB_OUTPUT
        id: docker_build

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: '<your-webapp-name>'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: ${{ steps.docker_build.outputs.image }}
3. 
Configure Secrets:
• In your GitHub repository's "Settings" -> "Secrets and variables" -> "Actions":
• DOCKERHUB_USERNAME: Your Docker Hub username.
• DOCKERHUB_PASSWORD: Your Docker Hub password.
• AZURE_WEBAPP_PUBLISH_PROFILE: Get this from your Azure Web App's "Configuration" -> "General settings" -> "Publish profile."
4. 
Testing:
• Push changes to the main branch.
• Check the "Actions" tab in GitHub for the workflow's progress.
• Access your deployed application using your web app's URL.
Key Points:
• Multi-Stage Build: The Dockerfile uses a multi-stage build to keep the final image size small.
• Nginx Routing: Nginx is used to serve both the frontend and backend, routing /api/... requests to the backend.
• Docker Hub/ACR: Choose either Docker Hub or Azure Container Registry to store your Docker image.
• Publish Profile: The AZURE_WEBAPP_PUBLISH_PROFILE secret is essential for deploying to Azure Web Apps.
• Environment Variables: Add environment variables to your Azure Web App's configuration if needed.
This setup provides a unified deployment for your frontend and backend, simplifying your CI/CD pipeline.