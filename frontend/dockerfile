
# Use a multi-stage build for efficiency
FROM node:20-alpine3.18 AS base
WORKDIR /app
COPY package*.json ./
RUN npm install

# Build stage
FROM base AS builder
COPY . .
RUN npm run build

# Production image
FROM base AS runner
ENV NODE_ENV production
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
CMD ["npm", "start"]



# # Stage 1: Build the Next.js application
# FROM node:22-alpine AS builder

# WORKDIR /app

# # Copy package.json and package-lock.json
# COPY package*.json ./

# # Install dependencies
# RUN npm install

# # Copy the rest of the application
# COPY . .

# # Build the Next.js app
# RUN npm run build

# # Stage 2: Serve the Next.js application
# FROM node:22-alpine

# WORKDIR /app

# # Copy the .next directory from the builder stage
# COPY --from=builder /app/.next ./.next

# # Copy package.json
# COPY --from=builder /app/package*.json ./

# # Install production dependencies
# RUN npm install
# #  --production

# # RUN npm run build

# # Expose the port
# EXPOSE 3000

# # Start the Next.js app
# CMD ["npm", "run", "start"]


# # # Stage 1: Build the Next.js application
# # FROM node:22-alpine AS builder

# # WORKDIR /app

# # # Copy package.json and package-lock.json (or yarn.lock)
# # COPY package*.json ./

# # # Install dependencies
# # RUN npm install

# # # Copy the rest of the application
# # COPY . .

# # # Build the Next.js app
# # RUN npm run build

# # # Stage 2: Serve the Next.js application with Node.js in production mode
# # FROM node:22-alpine

# # WORKDIR /app













# # # Copy only the necessary files from the builder stage
# # COPY --from=builder /app/.next ./next
# # COPY --from=builder /app/public ./public
# # COPY --from=builder /app/package*.json ./

# # # Install only production dependencies
# # RUN npm install --production

# # # Expose the port your Next.js app runs on
# # EXPOSE 3000

# # # Start the Next.js app in production mode
# CMD ["npm", "start"]